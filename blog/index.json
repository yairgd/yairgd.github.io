[{"url":"/2014/09/creating-a-new-theme/","title":"Creating a New Theme","content":"Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug $ Some Definitions There are a few concepts that you need to understand before creating a theme.\nSkins Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026quot;michael d henderson\u0026quot; description = \u0026quot;a minimal working template\u0026quot; license = \u0026quot;MIT\u0026quot; name = \u0026quot;zafta\u0026quot; source_repo = \u0026quot;\u0026quot; tags = [\u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026quot;YOUR_NAME_HERE\u0026quot; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026quot;zafta\u0026quot; baseurl = \u0026quot;\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;zafta - totally refreshing\u0026quot; MetaDataFormat = \u0026quot;toml\u0026quot; :wq $ Generate the Site Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\n Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically.  The Home Page Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4.  I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026quot;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\n index.html _default/list.html _default/single.html  We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026quot;\u0026quot; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:54:53-05:00\u0026quot; title = \u0026quot;first\u0026quot; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:57:09-05:00\u0026quot; title = \u0026quot;second\u0026quot; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;, \u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026quot;. In our template, the commands are:\n range .Title end  The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/second/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/first/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026quot;about\u0026quot; description = \u0026quot;about this site\u0026quot; date = \u0026quot;2014-09-27\u0026quot; slug = \u0026quot;about time\u0026quot; +++ ## about us i'm speechless :wq Generate the web site and verify the results.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/'. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/theme/\u0026quot;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/about-time/\u0026quot;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/second-post/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/first-post/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026quot;page\u0026quot; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026quot;/:title/\u0026quot; about = \u0026quot;/:filename/\u0026quot; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026quot;theme/partials/header.html\u0026quot; . }} versus\n{{ partial \u0026quot;header.html\u0026quot; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026quot;page\u0026quot;) (eq .Type \u0026quot;about\u0026quot;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"},{"url":"/2014/03/migrate-to-hugo-from-jekyll/","title":"Migrate to Hugo from Jekyll","content":"Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png  should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\n  Change your submodule to point to map gh-pages to public instead of _site (recommended).\n git submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public    Or, change the Hugo configuration to use _site instead of public.\n { .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. }    Convert Jekyll templates to Hugo templates That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag)  is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt;  Usage I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}  to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}}  As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches Fix content Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"},{"url":"/2020/09/ecpise-with-cmake-project-on-windows/","title":"Ecpise with CMake project on windows","content":"CMake is a powerful tool to manage c/c++ projects, and I prefer to use it in on my embedded projects also. Usually, I work in a Linux environment in the terminal where everything is installed properly in its place, and things work great. Still, when I had to switch it to eclipse on windows environment, that was a challenging task. Hence, I describe here the stages that I had to do to import a CMake project from Linux to eclipse that run on windows. The first stage is to install the following software on windows.\n arm tool chain gnu make tool - used by cmake and eclipse cmake jdk 11 - used by eclipse eclipse for mcu  For convenience, it is better to install the software above in the global path variable.\nCMake project The CMake tools is a generator of build systems. It can create projects to different kinds of IDEs like eclipse and visual studio, and depend on a selected IDE; it makes appropriate project files. CMake project s a sort of scripting language that defines the project files, compiler, flag, etc.\u0026rsquo; For embedded projects, I usually maintain two sub projects:\n embedded project PC project - includes unit tests, a library of communication, etc.\u0026rsquo;  The general template for such a project can have the following structure.\n├── arm_app │ ├── src │ ├── bsp │ └── CMakeLists.txt ├── CMakeLists.txt ├── shared └── pc_app └── CMakeLists.txt Each directory includes a nested CMakeLists.txt as it should be in CMake projects. The BSP directory usually should be taken from the chip (st, cypress, Atmel, etc.') provider, the src directory is the project itself, and its structure depends on the project. It may contain more subdirectories and libraries.\nI have used the following CMake variable to skip compiler checks that may fail under windows.\nset(CMAKE_C_COMPILER_WORKS 1)set(CMAKE_CXX_COMPILER_WORKS 1)This variable setting is specific for the embedded cross compiler:\nSET(CMAKE_CROSSCOMPILING 1)set(CMAKE_SYSTEM_NAME Generic)set(CMAKE_SYSTEM_PROCESSOR arm)and finaly this variabe to handle CMake error as reffers here\nset(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS \u0026#34;\u0026#34;)set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS \u0026#34;\u0026#34;)top project The top CMakeLists contains the following content:\ncmake_minimum_required (VERSION 2.8)SET(CMAKE_CONFIGURATION_TYPES \u0026#34;Debug;Release;MinSizeRel;RelWithDebInfo\u0026#34; CACHE STRING \u0026#34;\u0026#34; FORCE)if (NOT CMAKE_BUILD_TYPE)\tset (CMAKE_BUILD_TYPE Debug CACHE STRING \u0026#34;Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel.\u0026#34; FORCE )endif (NOT CMAKE_BUILD_TYPE)set (CMAKE_USE_RELATIVE_PATHS True)\\add_subdirectory (${CMAKE_SOURCE_DIR}/arm_app )add_subdirectory (${CMAKE_SOURCE_DIR}/pc_app )SET(CMAKE_GENERATOR \u0026#34;Unix Makefiles\u0026#34;)project (top NONE)It not a project, but it calls the other two subdirectories with the projects.\npc application For the pc application, we need CMake project. [Reffer (https://github.com/yairgd/atari) here for a simple project that I wrote, and it works with CMake. The shared directory should contain source files which compiled on both systems: embedded and PC. Usually, these files relate to the structures and code that both CPUs used for communication or any other shared data between the MCP and its host.\nembedded application The CMakeLists of the arm application contains the path to arm compiler. If there is a PATH variable that points to the compiler - The installation asks in installation if we want it in the global PATH - COM_PATH can be lived empty. The CON_EXT includes the exe suffix in windows application. The following CMakeLists.txt has a linker configuration for arm cortex-m4.\nif (UNIX)\tset (COM_EXT \u0026#34;\u0026#34;)\tset (COM_PATH /path/to/arm-compiler)\tadd_custom_target(flash #COMMAND ${OBJCOPY} -O ihex -R .eeprom $\u0026lt; $@ \tCOMMAND echo \u0026#34;It can be replaced comand to flash bin to jtag\u0026#34; )\tset (unix_extra_define \u0026#34;-DCONFIG_VERSION\u0026#34;)\telse()\tset (COM_EXT \u0026#34;.exe\u0026#34;)\tset (COM_PATH \u0026#34;c:\\path\\to\\arm-compiler\u0026#34;)endif()set(CMAKE_CXX_COMPILER ${COM_PATH}arm-none-eabi-g++${COM_EXT} ) \tset(CMAKE_C_COMPILER ${COM_PATH}arm-none-eabi-gcc${COM_EXT} )set(CMAKE_ASM_COMPILER ${COM_PATH}arm-none-eabi-gcc${COM_EXT} )set(CMAKE_AR ${COM_PATH}arm-none-eabi-ar${COM_EXT} )# special settings for embedded compiler under windows set(CMAKE_C_COMPILER_WORKS 1)set(CMAKE_CXX_COMPILER_WORKS 1)SET(CMAKE_CROSSCOMPILING 1)set(CMAKE_SYSTEM_NAME Generic)set(CMAKE_SYSTEM_PROCESSOR arm)set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS \u0026#34;\u0026#34;)set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS \u0026#34;\u0026#34;)project (arm_app)#version number set (PROJECT_VERSION_MAJOR 1)set (PROJECT_VERSION_MINOR 0)if (CMAKE_BUILD_TYPE STREQUAL \u0026#34;Debug\u0026#34;)\tmessage(\u0026#34;debug mode\u0026#34;)\tset (CMAKE_C_FLAGS \u0026#34; -mcpu=cortex-m4 -mfloat-abi=softfp -mfpu=fpv4-sp-d16 -mthumb ${CMAKE_C_FLAGS_DEBUG}\u0026#34; )\tset (CMAKE_CXX_FLAGS \u0026#34; -mcpu=cortex-m4 -mfloat-abi=softfp -mfpu=fpv4-sp-d16 -mthumb ${CMAKE_CXX_FLAGS_DEBUG} -fpermissive\u0026#34; )endif (CMAKE_BUILD_TYPE STREQUAL \u0026#34;Debug\u0026#34;) if (CMAKE_BUILD_TYPE STREQUAL \u0026#34;Release\u0026#34;)\tmessage(\u0026#34;debug mode\u0026#34;)\tset (CMAKE_C_FLAGS \u0026#34; -mcpu=cortex-m4 -mfloat-abi=softfp -mfpu=fpv4-sp-d16 -mthumb ${CMAKE_C_FLAGS_RELEASE}\u0026#34; )\tset (CMAKE_CXX_FLAGS \u0026#34; -mcpu=cortex-m4 -mfloat-abi=softfp -mfpu=fpv4-sp-d16 -mthumb ${CMAKE_CXX_FLAGS_RELEASE} -fpermissive\u0026#34; )endif (CMAKE_BUILD_TYPE STREQUAL \u0026#34;Release\u0026#34;) enable_language(ASM)SET (ASM_OPTIONS \u0026#34;-x assembler-with-cpp\u0026#34;)SET(CMAKE_ASM_FLAGS \u0026#34;${CMAKE_C_FLAGS} ${ASM_OPTIONS}\u0026#34; )include_directories( ${CMAKE_SOURCE_DIR}/app ${CMAKE_SOURCE_DIR}/bsp )add_definitions( -D CY_CORE_ID=0 -D CY_PSOC_CREATOR_USED=1 -DCY8C6347BZI_BLD53 ${unix_extra_define})set ( CMAKE_EXE_LINKER_FLAGS \u0026#34; -mcpu=cortex-m4 -mfloat-abi=softfp -mfpu=fpv4-sp-d16 -mthumb -T ${CMAKE_SOURCE_DIR}/project/PSoC6/cy8c6xx7_cm4_dual.ld -specs=nano.specs -Wl,--gc-sections -g -ffunction-sections -ffat-lto-objects -e Reset_Handler\u0026#34;)add_subdirectory (${CMAKE_CURRENT_SOURCE_DIR}/bsp )add_subdirectory (${CMAKE_CURRENT_SOURCE_DIR}/app )create an eclipse project To create an eclipse project, we have to run the following code in windows command terminal:\ncd c:\\path\\to\\project mkdir Debug cmake -G \u0026#34;Eclipse CDT4 - Unix Makefiles\u0026#34; -DCMAKE_BUILD_TYPE=Debug -DCMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT=TRUE -DCMAKE_ECLIPSE_MAKE_ARGUMENTS=-j8 .. As a result of that , cmake will create in the Debug directory files for eclipse roject like : .project,.cproject,.setings.   create eclipse project   Now, in eclipse it has to import the project   project import   select Debug and click on the eftbutton and press on import   import the debug project   now, it can build, debug, and run it as any other eclipse project.   project ready to work   further issues References "},{"url":"/post/index.json","title":"Posts","content":""},{"url":"/2020/08/install-linux-on-microzed-board/","title":"install linux on microzed board ","content":"The microzed development board has Xilinx zynq7000 chip. It has an application process unit with cortex a9 and FPGA fabric. The board also contains interfaces like SDIO and QSPI. I want to install Linux on it directly with yocto and without petalinux, which runs yocto behind the scene, so I tried to eliminate the need to use it. Why do so?\n It is interesting, and I have a lot of experience with yocto and it very easy to work with its script once you know it easy porting to other processors: IMX, stm32Mp157, etc\u0026rsquo; using build tools like CMake,Autotools, and yocto scripts make it very easy to port SW between different processors.  I found that meta-xilinx layer and used it to build a Linux system for the microzed board. Refer here for a list supported bords and creating a custom board can be very easy if one tracks the existing ones.\nyocto installation The basic yocto installation includes poky and meta-Xilinx layers; check out the following yocto layers and switch to zeus branch:\nmkdir yocto cd yocto git clone git://git.yoctoproject.org/poky.git git clone https://github.com/Xilinx/meta-xilinx git clone http://github.com/Xilinx/meta-xilinx-tools . ./poky/oe-init-build-env add the meta-xilinx layers:\nbitbake-layers add-layer /path/to/meta-xilinx bitbake-layers add-layer /path/to/meta-xilinx-tools and change the configration file conf/local.conf:\n# to build microzed board MACHINE ??= \u0026#34;microzed-zynq7\u0026#34; # to allow c++ IMAGE_INSTALL_append = \u0026#34; libstdc++\u0026#34; TOOLCHAIN_TARGET_TASK_append = \u0026#34; libstdc++-staticdev\u0026#34; Use the following yocto builds:\n# to create minimal CPIO image (3M Bytes) + kernel + u-boot bitbake core-image-minimal bitbake u-boot flash image on QSPI FSBL The next step is to generate FSBL application for microzed platform board. The board definition files (BDF) should be installed on vivado as refer here. So, just create a new HW project in vivado for microzed and the export the XSA (of HDF) file to vitis (of SDK) and then create a new FSBL application.\nboot.bin To create the boot.bin file, we can use bootgen, which is a tool of Xilinx or to use mkbootimage which is an open-source replacement for Xilinx bootgen tool. I took the values of the parameters load and offset address from the u-boot file zynq-common.h.\n#!/bin/bash UIMAGE_LOAD=0x3000000 DTB_LOAD=0x2a00000 FS_LOAD=0x2000000 KERNEL_ENTRY=0x100000 DTS_ENTRY=0x600000 RAM_FS_ENTRY=0x620000 cat \u0026lt;\u0026lt; EOF \u0026gt; boot.bif img : { [bootloader]/home/yair/workspace2/fsbl_microzed/Release/fsbl_microzed.elf /home/yair/xilinx/yocto/build/tmp/work/microzed_zynq7-poky-linux-gnueabi/u-boot/1_2019.07-r0/build/u-boot.elf [load=${UIMAGE_LOAD},offset=${KERNEL_ENTRY}]yocto/build/tmp/work/microzed_zynq7-poky-linux-gnueabi/linux-xlnx/4.19-xilinx-v2019.2+gitAUTOINC+b983d5fd71-r0/deploy-linux-xnx/uImage\t[load=${DTB_LOAD},offset=${DTS_ENTRY}]yocto/build/tmp/work/microzed_zynq7-poky-linux-gnueabi/linux-xlnx/4.19-xilinx-v2019.2+gitAUTOINC+b983d5fd71-r0/deploy-linux-xlnx/zynq-microzed-microzed-zynq7.dtb\t[load=${FS_LOAD},offset=${RAM_FS_ENTRY}]yocto/build/tmp/deploy/images/microzed-zynq7/core-image-minimal-microzed-zynq7.cpio.gz.u-boot } EOF bootgen -image boot.bif -o i boot.bin -w flash the board To flash the image on the qspi is has to set the board at jtag mode and run the following command:\nprogram_flash -f /path/to/boot.bin -offset 0 -flash_type qspi_single -fsbl /path/to/fsbl_microzed.elf -blank_check -verify -cable type xilinx_tcf url TCP:127.0.0.1:3121 also so, it can refer here about how to eliminate the need for JTAG mode by adding this line to FSBL at main.c\n/* * Read bootmode register */ BootModeRegister = Xil_In32(BOOT_MODE_REG); BootModeRegister \u0026amp;= BOOT_MODES_MASK; //add this line to trick boot mode to JTAG BootModeRegister = JTAG_MODE; manual boot This u-boot commands will read files from QSPI and will load the Linux kernel it can also automated using u-boot enviroment variables and scripts.\nsf probe 0 0 0 sf read 0x2000000 0x620000 0x500000 sf read 0x3000000 0x100000 0x5e0000 sf read 0x2a00000 0x600000 0x20000 bootm 0x3000000 0x2000000 0x2a00000 boot image on sd card The stages for flashing images on the sd card are similar to those that have on the QSPI. But I was to use a completely open-source without FSBL. The idea is to take the boot.bin file ( generated using vivado tools) and replace it with the secondary boot loader (SPL). The most important file is ps7_init_gpl.c which one create it using vivado tools, and it also platforms unique and responsible to initialize the most critical peripherals in the board: The DDR controller, clocks and MIO pins. If a new platform is a design, then, is has to generate a new file for the new platform. It has to copy the following files to the sd card, refer here for more details:\n table { display: block; max-width: -moz-fit-content; max-width: fit-content; margin: 0 auto; overflow-x: auto; } table thead tr th:nth-of-type(1) { width: 10%; background-color: #777 } table thead tr th:nth-of-type(2) { width: 10%; background-color: #777 } table thead tr th:nth-of-type(3) { width: 80%; background-color: #777 } table tbody td:nth-of-type(1) { width: 10%; background-color: #ccc }     file name on sd card note     boot.bin BOOT.bin It is the SPL and replace the previous boot.bin   yocto/build/tmp/work/microzed_zynq7-poky-linux-gnueabi/linux-xlnx/4.19-xilinx-v2019.2+gitAUTOINC+b983d5fd71-r0/deploy-linux-xlnx/microzed.dtb devicetree.dtb The device tree file   yocto/build/tmp/work/microzed_zynq7-poky-linux-gnueabi/linux-xlnx/4.19-xilinx-v2019.2+gitAUTOINC+b983d5fd71-r0/deploy-linux-xnx/uImage uImage u-boot image of linux kernel   yocto/build/tmp/deploy/images/microzed-zynq7/core-image-minimal-microzed-zynq7.cpio.gz.u-boot uramdisk.image.gz u-boot image of compressed CPIO file system   yocto/build/tmp/work/microzed_zynq7-poky-linux-gnueabi/u-boot/1_2019.07-r0/build/u-boot.img u-boot.img It is a u-boot image that contains u-boot.bin, and the SPL loads it from sd card extract the u-boot.bin and loads it to memory. Reffer here to the default name u-boot.img that is used by SPL     The names mentioned in the table above, are arrived from the file boot.cmd which process of yocto build generates that file.\n$ yocto/build/tmp/work/microzed_zynq7-poky-linux-gnueabi/u-boot-zynq-scr/1.0-r0 $ cat boot.cmd fatload mmc 0 0x2000000 zynq-microzed.dtb fatload mmc 0 0x2080000 uImage fatload mmc 0 0x4000000 uramdisk.image.gz bootm 0x2080000 0x4000000 0x2000000 TO do: Install boot image on QSPI with SPL To eliminate the FSBL when using QSPI.\nReferences [1] Creating a Bootable Image and Program the Flash\n"},{"url":"/2020/06/custom-opkg-repository/","title":"Custom opkg repository","content":"The post presenst simple example to create opkg repository to upgrade embbded linux systems using nginx server. The opkg pakcge should be installed as part of the image furing the first instalation. To add opkg to yocto image type type folloing line in file conf/local.conf\nIMAGE_INSTALL_append = \u0026#34; opkg \\ \u0026#34; downlad and install opkg utils:\ngit clone git://git.yoctoproject.org/opkg-utils and create Packages.gz file:\ncd /path-to-yocto-build/build/tmp/deploy/ipk ~/opkg-utils/opkg-make-index . \u0026gt; Packages.gz install nginx I haved used gentoo system , so inorder to install nginx on gentoo type:\nemerge nginx now , config a simple nxing configuration file under /etc/nginx/nginx.conf\nuser nginx nginx; worker_processes 1; error_log /var/log/nginx/error_log info; events { worker_connections 1024; use epoll; } http { include /etc/nginx/mime.types; default_type application/octet-stream; log_format main \u0026#39;$remote_addr - $remote_user [$time_local] \u0026#39; \u0026#39;\u0026#34;$request\u0026#34; $status $bytes_sent \u0026#39; \u0026#39;\u0026#34;$http_referer\u0026#34; \u0026#34;$http_user_agent\u0026#34; \u0026#39; \u0026#39;\u0026#34;$gzip_ratio\u0026#34;\u0026#39;; client_header_timeout 10m; client_body_timeout 10m; send_timeout 10m; connection_pool_size 256; client_header_buffer_size 1k; large_client_header_buffers 4 2k; request_pool_size 4k; gzip off; output_buffers 1 32k; postpone_output 1460; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 75 20; ignore_invalid_headers on; #\tinclude /etc/nginx/sites-enabled/*; #\tindex Packages.gz; server { listen 80 default_server; listen [::]:80 default_server; server_name localhost; location / { root /path-to-yocto-build/build/tmp/deploy/ipk; rewrite ^/repo(.*)$ /$1 last; break; } } } and then restart nginx:\n/etc/init.d/nginx restart define the device In the linux device, add the following line to /etc/opkg/opkg.con/\nsrc/gz repo http://server.name.or.ip.address/repo to test it type:\nopkg update References [1] https://stackoverflow.com/questions/9650756/nginx-ignore-location-part\n"},{"url":"/2020/05/kalman-filter-and-pair-trading/","title":"Kalman filter and pair trading","content":"Pair trading is a type of cointegration approach to statistical arbitrage trading strategy in which usually a pair of stocks are tcraded in a market-neutral strategy, i.e. it doesn’t matter whether the market is trending upwards or downwards, the two open positions for each stock hedge against each other. The key challenges in pairs trading are to:\n Choose a pair which will give you good statistical arbitrage opportunities over time Choose the entry/exit points  One of the challenges with the pair trading is that cointegration relationships are seldom static. I implemented a Kalman filter to track changes in this relationship between the stocks with synthesized stocks data.\ndata sythesis These are some initil paramaters for octabe/matlab simulation:\nmu=0.1; t=1:1000; sig=0.3; T=1; N=1000; r=mu-sig^2/2; Y=randn; h=T/N; sh=sqrt(h); mh=r*h; x0=100; I have used the simplest form to model the relationship between a pair of securities in the following way: $$ \\beta(t) = \\beta(t-1) + \\omega\\\\ \\omega \\sim N(0,Q)\\\\ $$  where beta is the unobserved state variable that follows a random walk, and W is a Gaussian distributed process with men 0 standard deviation Q.\nR=sqrt (0.001); Q=sqrt(0.00001); beta=1+cumsum (Q*randn(size(t)));   Raw Bayer Image   The observed processes of stock prices Y(t) and X(t) and V is gaussion disribued process with men 0 standard deviation R. $$ Y(t)=\\beta(t)X(t)+v \\\\ v \\sim N(0,R)\\\\ $$  clear G X=x0; G(:,1)=[0 x0]; for j=2:N z=randn; X=X*exp(mh+sh*sig*z); G(:,j) = [j*h X]; end x=G(2,:); y=x.*beta + R*randn(size(t));   Generated stocks X \u0026amp; Y   Kalman filer Instead of the typical approach to estimate beta using least squares regression, or some kind of rolling regression (to try to take account of the fact that beta may change over time). In this traditional framework, beta is static or slowly changing.\nIn the Kalman framework, beta is itself a random process that evolves continuously over time, as a random walk. Because it is random and contaminated by the noise, we cannot observe beta directly but must infer its (changing) value from the observable stock prices X and Y.\nKalman filter has very complicated mathematical and statistical theory behind it. See here for tutorial. Kalman filter algorithm has two states:\n prediction: in this stage, the algorithm will predict the next beta before it has the stock prices. The prediction is at time t and based on beta values from previous times. update: in this stage, the algorithm will update the prediction of beta after it has the stock price at time t.  Q=0.8; H=1; P=1; K=1; F=[0.1 0.1 .8 ];n=3; beta_est(1:n)=beta(1:n); clear PP for i=n+1:size(t,2) %Prediction beta_est(i)=F*beta_est(i-n:i-1)\u0026#39;; P=F*P*F\u0026#39;+Q; % uses to decide for trade since index \u0026#39;i\u0026#39; is a later time, and we have info till time \u0026#39;i-1\u0026#39;. beta_pred(i)=F*beta_est(i-n:i-1)\u0026#39;; % update , it time \u0026#39;i\u0026#39; and the stock info at this time is known r= y(i)/x(i) -beta_est(i); K=P^1*H\u0026#39;*(R+H*P^-1*H\u0026#39;)^-1; beta_est(i)=beta_est(i) + K*r; P=(ones(1,1)-K*H)*P; PP(end+1,:) = [P K];\tend The following figure diplaye kalman filter resolt. The blue graph is the orignal beta, which is hidden variable and cannot diplayed directly. The green one is the preidcted beta which is used by the trade algorithm to take descitiopn about trade. The red graph is estimated beta which calculated right after the update stage.\n  Kalman filter resolts   trading algorithm The trading algorithm is very simple and show great resoluts: $$ position(t)=\\left\\{ \\begin{array}{ll} 1 \u0026 , beta0 \\\\ -1 \u0026 , betaii=find (y-beta_pred.*x\u0026gt;0.0); s=y- beta_pred.*x; s=[0 diff(s)]; ii=ii(10:end); % ignore the converegance time of kalman filter figure;plot (cumsum(s(ii))) xlabel(\u0026#39;time\u0026#39;); ylabel(\u0026#39;equity curve\u0026#39;);   Equity Curve   conclusions The results above are only theoretical and to apply this approach to real stock there arise a lot todo:\n to find a cointegrated pair of stocks. to find an automatic way to calibrate the Kalman-filter Q parameter. find a more complicated trading algorithm. For example: train a neural network model to get a maximum equity curve with maximum share ration. One can choose a better relationship model between stocks of the pair. The above equity curve is theoretical only since the synthesized data is stationary, and therefor the equity curve continuously grows. In a real stock pairing, the information is a complete mess, and the statistical characteristics are not known and not stationary. Nevertheless, it seems that the Kalman filter does an outstanding job with beta tracking and has a very high potential to work in the real trading strategy.  The code for this example is written in Matlab/octave and can be found here.\nReferences [1] http://jonathankinlay.com/2018/09/statistical-arbitrage-using-kalman-filter/\n[2] https://www.intechopen.com/books/introduction-and-implementations-of-the-kalman-filter/introduction-to-kalman-filter-and-its-applications\n[3] https://robotwealth.com/kalman-filter-pairs-trading-r/\n[4] Algorithmic Trading: Winning Strategies and their Rationale, Wiley, 2013\n"},{"url":"/2020/04/simple-hello-world-application-using-qt5-for-embedded-linux-device./","title":"Simple Hello World application using qt5 for embedded Linux device.","content":"This post presents a simple example of how to create a qt5 application for a Linux embedded device that runs Wayland or x-server. I\u0026rsquo;m using Yocto build system. I already have a BSP for IMX8 + toolchain so. I just have to install qt5 on it. In the time that I wrote this page. See here a reference to use Yocto project.\nbug workaroud I worked with sumo branch and had to do some work around over three bugs that I found during the compilation of qt5.\n apply this patch apply changes to this file: qfilesystemengine_unix.cpp. I found it under tmp/work/x86_64-linux/qtbase-native/5.10.1+gitAUTOINC+6c6ace9d23-r0/git/src/corelib/io/qfilesystemengine_unix.cpp.  line 101,107 - remove the static keyword, since the function already defined as an extern in another file. line 106 -removed - it caused to multiplay definition compilation error message.    install qt5-layer The layer meta-qt5 should defined on local/conf/bblayers.conf and the following command should run under the build directory:\nbitbake bitbake meta-toolchain-qt5 to install to sdk type under the build directory:\nsudo ./tmp/deploy/sdk/fsl-imx-xwayland-glibc-x86_64-meta-toolchain-qt5-aarch64-toolchain-4.14-sumo.sh when you do it, you can test it:\n$ . /opt/fsl-imx-xwayland/4.14-sumo/environment-setup-aarch64-poky-linux $ echo $CC aarch64-poky-linux-gcc --sysroot=/opt/fsl-imx-xwayland/4.14-sumo/sysroots/aarch64-poky-linux Simple application I created a straightforward application using qt-creator, and I had to run this command:\n. /opt/fsl-imx-xwayland/4.14-sumo/environment-setup-aarch64-poky-linux before I run qmake \u0026amp; make:\nqmake app.pro make These two commands should create the ELF file ready to run under the ARM.\ninstall and run the application QT_QPA_PLATFORM_PLUGIN_PATH=/ptath/to/plugins ./app In Gentoo desktop, the plugin path is /usr/lib/qt5/plugins/platforms/, so when we install the qt5 libraries that application depends on, we should also install it in the correct location. To install the application as part of an image, we have to write an appropriate bitbabke file that will install all dependencies. See recipes-qt to understand which files it requires to install.\n  Demo Application   The demo application runs two scripts as a response to a button press: install.sh and reboot.sh, each runs as a child process, and it displays its standard output on the text editor widget.\nReferences [1] https://stackoverflow.com/questions/17106315/failed-to-load-platform-plugin-xcb-while-launching-qt5-app-on-linux-without\n[2] https://stackoverflow.com/questions/50119427/how-can-i-capture-terminal-output-from-a-bash-script-and-display-it-in-my-qt-ui\n[3] https://forum.qt.io/topic/78532/qprocess-execute-capture-output\n"},{"url":"/2020/03/debug-linux-kernel-with-qemu/","title":"Debug Linux Kernel With Qemu","content":"I have tried to debug the Linux kernel using GDB and a system emulator qemu. I use YOCTO and standard pokey distribution to build Linux image and kernel. I made changes to the standard .config file to support debug symbols and remove the KASLR option from the kernel\nkernel config The kernel has to modify as the following:\n Build a Linux kernel with debug symbols by set: CONFIG_DEBUG_INFO=y Remove KASLR definition from the Linux kernel by unset: CONFIG_RANDOMIZE_BASE. This is from kernel help:   In support of Kernel Address Space Layout Randomization (KASLR), this randomizes the physical address at which the kernel image is decompressed and the virtual address where the kernel image is mapped, as a security feature that deters exploit attempts relying on knowledge of the location of kernel code internals\n run qemu The qemu can run like that:\nqemu-system-x86_64 -append \u0026#39;console=/dev/ttyS0\u0026#39; \\ \t-kernel /path/to/kernel-source/arch/x86_64/boot/bzImage \\ \t-nographic \\  -serial mon:stdio -S -s -enable-kvm -drive file=/path/to/rootfs.ext4,if=virtio,format=raw The roofts and the kernel made by Yocto. The -S tells the qemu to freeze after when it ready to run and -s pe gdbserver at 1234 by default.\nsetup the gdb Afther compiling the kernel run this command in the kernel directory:\ngdb ./vmlinux or, it also possible to extract the debug symbols from vmlinux like that:\nobjcopy --only-keep-debug vmlinux kernel.sym and in the gdb console type:\nfile kernel.sym from GDB console use target remote and monitor system_reset to controller the machine:\n(gdb) target remote :1234 (gdb) hbreak start_kernel # to stop at start_kernel function (gdb) monitor system_reset # if a restart is needed (gdb) monitor system_reset (gdb) c Continuing. Breakpoint 3, start_kernel () at init/main.c:514 514\t{ (gdb) l 509\t/* Should be run after espfix64 is set up. */ 510\tpti_init(); 511\t} 512\t513\tasmlinkage __visible void __init start_kernel(void) 514\t{ 515\tchar *command_line; 516\tchar *after_dashes; 517\t518\tset_task_stack_end_magic(\u0026amp;init_task); References https://yulistic.gitlab.io/2018/12/debugging-linux-kernel-with-gdb-and-qemu/\nhttps://unix.stackexchange.com/questions/396013/hardware-breakpoint-in-gdb-qemu-missing-start-kernel\nhttps://stackoverflow.com/questions/6710555/how-to-use-qemu-to-run-a-non-gui-os-on-the-terminal\n"},{"url":"/2020/02/install-yocto-and-kernel-development-tools-of-imx8/","title":"Install Yocto and kernel development tools of IMX8","content":"The GCC toolchain and kernel installation. The purpose of this post is to show the installation process of development tools for imx8m-var-dart, which is SOM made by Variscite. When using yocto, the kernel, userspace applications, and toolchain are part of the build. Still, when developing kernel modules, device tree changes, or userspace applications, it is more practical to make a standalone kernel build and to work on it outside the yocto.\nToolchain cd ~/var-fsl-yocto MACHINE=imx8m-var-dart DISTRO=fsl-imx-xwayland . var-setup-release.sh -b build_xwayland bitbake meta-toolchain and then install it:\ncd rootfs $ find . -type f -exec scp {} root@a.b.c.d:/ \\; where a.b.c.d is the ip of the target\nKernel To build the kernel, do the following steps:\n Download the kernel  git clone https://github.com/varigit/linux-imx.git cd linux-imx git checkout imx_4.14.78_1.0.0_ga_var01 edit this file:\nvim arch/arm64/boot/dts/freescale/Makefile and add to its end the following line:\ndtb-y += fsl-imx8mq-var-dart-your-dtb.dtb  compile build  source /opt/fsl-imx-xwayland/4.14-sumo/environment-setup-aarch64-poky-linux export LDFLAGS= make mrproper make imx8_var_defconfig ARCH=arm64 ## Customize the kernel configuration (optional step): make menuconfig ARCH=arm64 make ARCH=arm64 CROSS_COMPILE=/opt/fsl-imx-xwayland/4.14-sumo/sysroots/x86_64-pokysdk-linux/usr/bin/aarch64-poky-linux/aarch64-poky-linux- make modules ARCH=arm64 CROSS_COMPILE=/opt/fsl-imx-xwayland/4.14-sumo/sysroots/x86_64-pokysdk-linux/usr/bin/aarch64-poky-linux/aarch64-poky-linux- make dtbs ARCH=arm64 CROSS_COMPILE=/opt/fsl-imx-xwayland/4.14-sumo/sysroots/x86_64-pokysdk-linux/usr/bin/aarch64-poky-linux/aarch64-poky-linux-  installation - change directory to linux-imx-src and run the following code:  # Install the kernel image and modules: mkdir rootfs/boot -p kver=$(strings arch/arm64/boot/Image | grep -i \u0026#34;Linux version\u0026#34; | awk \u0026#39;{print $3}\u0026#39;) sudo cp arch/arm64/boot/Image.gz rootfs/boot/Image.gz-${kver} sudo make ARCH=arm64 modules_install INSTALL_MOD_PATH=rootfs cd rootfs/boot sudo ln -fs Image.gz-${kver} Image.gz cd .. # up to roofs # Install the device trees: find . -type f -exec scp {} root@a.b.c.d:/ \\; scp arch/arm64/boot/dts/freescale/fsl-imx8mq-var-dart-your-dtb.dtb root@a.b.c.d:/boot where a.b.c.d. is the ip of the target device\ncompiling userspace application with external library when a userspace application makes use with an external library, this library can add as a dependency to the bitbake file, which creates the application. The yocto process will take the library, will build and link it with the application. If we want to compile the application in userspace as part of a continuous development process, we can build it using bitbake command and place it under the root system of the compiler.\n"},{"url":"/2020/02/linux-uio-driver-to-handle-with-irq-source/","title":"Linux uio driver to handle with IRQ source ","content":"This is a a driver based on UIO subsystem to handle with external IRQ source.\nThe driver structure References [1] https://www.kernel.org/doc/html/v4.13/driver-api/uio-howto.html\n[2] http://fpga.org/2013/05/28/how-to-design-and-access-a-memory-mapped-device-part-two\n[3] https://elinux.org/images/b/b0/Uio080417celfelc08.pdf\n[4] https://www.osadl.org/fileadmin/dam/rtlws/12/Koch.pdf\n"},{"url":"/2020/02/linux-char-device-to-handle-with-irq/","title":"Linux char device to handle with IRQ ","content":"We have an external FPGA that triggers GPIO. To handle the IRQ in userspace, it had to write a Linux chr device to control the IRQ in the kernel space and than signalize the userspace using a standard system call. Here is the simple drive:\n#include \u0026lt;linux/module.h\u0026gt;#include \u0026lt;linux/kernel.h\u0026gt; /* printk() */#include \u0026lt;linux/moduleparam.h\u0026gt;#include \u0026lt;asm/uaccess.h\u0026gt;#include \u0026lt;asm/pgtable.h\u0026gt;#include \u0026lt;linux/fs.h\u0026gt;#include \u0026lt;linux/gfp.h\u0026gt;#include \u0026lt;linux/cdev.h\u0026gt;#include \u0026lt;linux/sched.h\u0026gt;#include \u0026lt;linux/interrupt.h\u0026gt;#include \u0026lt;linux/of_address.h\u0026gt;#include \u0026lt;linux/of_irq.h\u0026gt;#include \u0026lt;linux/of_platform.h\u0026gt; #include \u0026lt;linux/semaphore.h\u0026gt; DECLARE_WAIT_QUEUE_HEAD(hq); static int irq_num; static int x=0; //spinlock_t mLock = SPIN_LOCK_UNLOCKED; unsigned long flags; static DEFINE_SPINLOCK(mLock); static irqreturn_t fpga_irq_handle(int irq, void *dev_id) { wake_up(\u0026amp;hq); // printk(KERN_DEBUG \u0026#34;Interrupt\\n\u0026#34;);  return IRQ_HANDLED; } static ssize_t fpga_read(struct file *file, char __user *buf,size_t count,loff_t *ppos) { wait_event(hq,x); return 0; } static struct file_operations fpga_fops = { .owner = THIS_MODULE, .read = fpga_read, }; static struct cdev *fpga_cdev; #define DEVNAME \u0026#34;fpga-irq\u0026#34; static int fpga_init (void) { int res; struct device_node * np = NULL; res = request_irq(irq_num, fpga_irq_handle, 0, DEVNAME,0 ); if (res ) { printk (KERN_INFO \u0026#34;failed to request IRQ%u: %d\\n\u0026#34;,irq_num, res); return res; } printk(\u0026#34;OK to request IRQ: %u\\n\u0026#34;,irq_num); if(register_chrdev_region(MKDEV(230,0),1,\u0026#34;fpga\u0026#34;)) { printk (KERN_INFO \u0026#34;alloc chrdev error.\\n\u0026#34;); return -1; } fpga_cdev=cdev_alloc(); if(!fpga_cdev) { printk (KERN_INFO \u0026#34;cdev alloc error.\\n\u0026#34;); return -1; } fpga_cdev-\u0026gt;ops = \u0026amp;fpga_fops; fpga_cdev-\u0026gt;owner = THIS_MODULE; if(cdev_add(fpga_cdev,MKDEV(230,0),1)) { printk (KERN_INFO \u0026#34;cdev add error.\\n\u0026#34;); return -1; } return 0; } static void fpga_cleanup (void) { printk (KERN_INFO \u0026#34;hello unloaded succefully.\\n\u0026#34;); free_irq(irq_num,fpga_irq_handle); } module_init (fpga_init); module_exit (fpga_cleanup); MODULE_LICENSE(\u0026#34;GPL\u0026#34;); Makefile to buid the module:\nobj-m += fpga.o all: make -C /path/to/kernel M=$(PWD) ARCH=arm64 CROSS_COMPILE=/opt/fsl-imx-xwayland/4.14-sumo/sysroots/x86_64-pokysdk-linux/usr/bin/aarch64-poky-linux/aarch64-poky-linux- modules clean: make -C /path/to/kernel M=$(PWD) ARCH=arm64 CROSS_COMPILE=/opt/fsl-imx-xwayland/4.14-sumo/sysroots/x86_64-pokysdk-linux/usr/bin/aarch64-poky-linux/aarch64-poky-linux- modules clean Here is a test program which gets periodical IRQ. It open and wait for IRQ event, and each event triggers another GPIO, which can see on a scope device.\n#include\u0026lt;stdio.h\u0026gt;#include\u0026lt;fcntl.h\u0026gt;#include\u0026lt;unistd.h\u0026gt;#include\u0026lt;sys/ioctl.h\u0026gt;#include \u0026lt;stdlib.h\u0026gt;#include \u0026lt;sys/types.h\u0026gt;#include \u0026lt;sys/stat.h\u0026gt;#include \u0026lt;fcntl.h\u0026gt;#include \u0026lt;sys/mman.h\u0026gt;#include \u0026lt;pthread.h\u0026gt; void *thread_isr(void *p) { char buf[100]; int fd,led_fd; fd=open(\u0026#34;/dev/fpga\u0026#34;,O_RDONLY); led_fd=open(\u0026#34;/sys/class/gpio/gpio100/value\u0026#34;,O_WRONLY); while(1) { write(led_fd,\u0026#34;1\u0026#34;,1); read(fd,buf,1); write(led_fd,\u0026#34;0\u0026#34;,1); usleep(400); // printf(\u0026#34;Interrupt handler\\n\u0026#34;);  write(led_fd,\u0026#34;1\u0026#34;,1); } } int main() { pthread_t t1; puts(\u0026#34;start\u0026#34;); pthread_create(\u0026amp;t1,NULL,thread_isr,NULL); while (1) sleep(500); return 1; } to compile and copy the test to target run:\n$CC test.c -o test -lpthread -g -O2 scp test root@a.b.c.d:/home/root #a.b.c.d is the target ip address the demo app triggers GPIOs to measure the response in scope and the following commands should be run before the test:\ninsmod fpga.ko mknod /dev/fpga c 230 0 echo 100 \u0026gt; /sys/class/gpio/export echo \u0026#34;out\u0026#34; \u0026gt; /sys/class/gpio/gpio100/direction echo 1 \u0026gt; /sys/class/gpio/gpio100/value echo 0 \u0026gt; /sys/class/gpio/gpio100/value References [1] https://yurovsky.github.io/2014/10/10/linux-uio-gpio-interrupt.html\n[2] https://github.com/torvalds/linux/blob/master/drivers/uio/uio_pdrv_genirq.c\n[3] https://lwn.net/Articles/127293/\n[4] https://wiki.embeddedarm.com/wiki/Userspace_IRQ\n[5] https://elinux.org/images/9/9b/GPIO_for_Engineers_and_Makers.pdf\n[6] https://harmoninstruments.com/posts/uio.html\n[7] http://alvarom.com/2014/12/17/linux-user-space-drivers-with-interrupts\n[8] http://www.discoversdk.com/knowledge-base/interrupt-handling-in-user-space\n[9] https://yurovsky.github.io/2014/10/10/linux-uio-gpio-interrupt.html\n[10] https://fpgacpu.wordpress.com/2013/05/28/how-to-design-and-access-a-memory-mapped-device-part-two/\n"},{"url":"/2020/02/linux-module-magic-info/","title":"Linux module magic info ","content":"Sometimes we want to build a module separate from the kernel. When the kernel is built, it generates a magic number, which probably depends on compiler version, kernel version, git source revision, etc. Time is also probably part of this magic number, since the kernel may build with the same parameters but with a different timestamp, it will have a different magic number, and then we will get this message when we try to insert it:\nroot@linux:~# insmod /lib/modules/4.14.78-imx8m+g7808f06d8af2/extra/hello.ko insmod: ERROR: could not insert module /lib/modules/4.14.78-imx8m+g7808f06d8af2/extra/hello.ko: Invalid module format recompile module just got to this file and change UTS_RELEASE:\n$ cat ./include/generated/utsrelease.h #define UTS_RELEASE \u0026#34;4.14.78-g8e54a4b719e6\u0026#34; module that we cannot recompile To handle this situation without installing a new kernel + modules, we will replace the module magic number. This not work for some reason that I don\u0026rsquo;t understand. The easy and the right way is to change the utsrelease.h file explained above. I\u0026rsquo;m sure that what I\u0026rsquo;m doing here is correct, but since I already start to investigate it, I will keep it here for sometime else.\nThe kernel version can be achieved form this command:\n$strings arch/arm64/boot/Image | grep -i \u0026#34;Linux version\u0026#34; Linux version 4.14.78-g8e54a4b719e6 (yair@yair) (gcc version 7.3.0 (GCC)) #1 SMP PREEMPT Tue Oct 22 11:54:22 IDT 2019 and the module version is archive from :\nmodinfo -F vermagic hello.ko The full modinfo section can be displayed by:\n$ objdump -s -j .modinfo hello.ko hello.ko: file format elf64-little Contents of section .modinfo: 0000 6c696365 6e73653d 47504c00 00000000 license=GPL..... 0010 64657065 6e64733d 006e616d 653d6865 depends=.name=he 0020 6c6c6f00 7665726d 61676963 3d342e31 llo.vermagic=4.1 0030 342e3738 2d673865 35346134 62373139 4.78-g8e54a4b719 0040 65362053 4d502070 7265656d 7074206d e6 SMP preempt m 0050 6f645f75 6e6c6f61 64206161 72636836 od_unload aarch6 0060 3400 To get the module magic number run:\n$ modinfo hello.ko filename: hello.ko license: GPL depends: name: hello vermagic: 4.14.78-g8e54a4b719e6 SMP preempt mod_unload aarch64 copy the modinfo section to a file:\nexport OBJCOPY=/opt/fsl-imx-xwayland/4.14-sumo/sysroots/x86_64-pokysdk-linux/usr/bin/aarch64-poky-linux/aarch64-poky-linux-objcopy $OBJCOPY ./hello.ko /dev/null --dump-section .modinfo=mod_info update the magic number\nsed \u0026#39;s/4.14.78-g8e54a4b719e6/4.14.78+g7808f06d8af2/g\u0026#39; -i mod_info update the module\n$ $OBJCOPY --remove-section=.modinfo --add-section .modinfo=mod_info hello.ko test for the new magic number\n$ modinfo hello.ko filename: hello.ko license: GPL depends: name: hello vermagic: 4.14.78+g7808f06d8af2 SMP preempt mod_unload aarch64 Related issues example of two related issues:\n  See here for a bug report which relates to this issue. The problem there was that the file ./include/generated/utsrelease.h did not exist. To fix, it only has to recompile the kernel.\n  Fail during the compilation of sys-kernel/spl-0.7.13 at Gentoo system. Again, in this case, just need to build the kernel and make /usr/src/linux points to it.\n  checking spl config... all checking kernel source directory... /usr/src/linux checking kernel build directory... /usr/src/linux checking kernel source version... Not found configure: error: *** Cannot find UTS_RELEASE definition. !!! Please attach the following file when seeking support: !!! /var/tmp/portage/sys-kernel/spl-0.7.13/work/spl-0.7.13/config.log * ERROR: sys-kernel/spl-0.7.13::gentoo failed (configure phase): * econf failed * * Call stack: * ebuild.sh, line 125: Called src_configure * environment, line 4738: Called autotools-utils_src_configure * environment, line 934: Called econf \u0026#39;--docdir=/usr/share/doc/spl-0.7.13\u0026#39; \u0026#39;--bindir=/bin\u0026#39; \u0026#39;--sbindir=/sbin\u0026#39; \u0026#39;--with-config=all\u0026#39; \u0026#39;--with-linux=/usr/src/linux\u0026#39; \u0026#39;--with-linux-obj=/usr/src/linux\u0026#39; \u0026#39;--disable-debug\u0026#39; * phase-helpers.sh, line 681: Called __helpers_die \u0026#39;econf failed\u0026#39; * isolated-functions.sh, line 112: Called die * The specific snippet of code: * die \u0026#34;$@\u0026#34; * * If you need support, post the output of `emerge --info \u0026#39;=sys-kernel/spl-0.7.13::gentoo\u0026#39;`, * the complete build log and the output of `emerge -pqv \u0026#39;=sys-kernel/spl-0.7.13::gentoo\u0026#39;`. * The complete build log is located at \u0026#39;/var/tmp/portage/sys-kernel/spl-0.7.13/temp/build.log\u0026#39;. * The ebuild environment file is located at \u0026#39;/var/tmp/portage/sys-kernel/spl-0.7.13/temp/environment\u0026#39;. * Working directory: \u0026#39;/var/tmp/portage/sys-kernel/spl-0.7.13/work/spl-0.7.13\u0026#39; * S: \u0026#39;/var/tmp/portage/sys-kernel/spl-0.7.13/work/spl-0.7.13\u0026#39; reference [1] How to change the vermagic of a module\n"},{"url":"/2020/02/linux-core-isolation/","title":"Linux core isolation","content":"I have a real-time task that needed to run periodically at a constant rate - a continuous IRQ drives it. Just running this task on a multithreaded environment can cause it to run in different timing values. When the system runs on stress (using stress utility) the system is not a response to all IRQ requests. A possible solution to this problem is to use Linux core isolation. In this case, we assign a specific core for the task, and the Linux kernel is getting out from the SMP balancing, and this core can use for a particular job with minimal interrupts.\nturn on the device and press any key to stop u-boot and command line. Type the following command (which can change between different board)\nsetenv mmcargs \u0026#34;setenv bootargs console=${console}root=${mmcroot}video=${video}isolcpus=2\u0026#34; after boot, type and see the isolated core.\n# cat /sys/devices/system/cpu/isolated 2 References Here are some reference sources that used to create this post\n[1] Whole one core dedicated to a single process\n[2] INTERRUPTS AND IRQ TUNING\n[3] how to detect if isolcpus is activated?\n"},{"url":"/2020/02/linux-module-to-disassemble-code-in-the-linux-kernel./","title":"Linux module to disassemble code in the Linux kernel.","content":"A simple module to disassembly memory using a Linux kernel module. This module is based on Zydis and integrated into this module. Also, there is a userspace application to demonstrate the Zydis library on a test function in user space and disassembly of the same c function at the kernel space. Also can dissemble internal c functions of the kernel like printk, kmalloc etc\u0026rsquo;.\nModule structure The module allows two interfaces from userspace:\n  Using kernel parameters API:This part of the module demonstrates the use of module parameters API to control the module. There is one parameter named func and it uses to select from userspace the internal function to disassemble.\n  Using kernel char device API (using a misc device):The purpose of this interface is to make a file behavior for the disa module using /dev/disa using file system calls open, read,ioctl, and its content is the disassembly text code of a selected function. The selected function can be one of two: Internal kennel function (see kernel parameter func)  The local function of a process and it set using ioctl system call.    Build the module git clone https://github.com/yairgd/disa.git cd disa make Testing the module Run test1,test2.py are unit tests for this module and to load into the kernel use this command:\nsudo insmod module/disa.ko sudo ./test1 sudo ./test2.py Testing of disassembly of userspace function Compare between the output of test1 function that disassembles func1 (see test1.c) on userspace and in the kernel space using disa module. Here is the output of test1 in userspace:\nthis function named \u0026#34;func1\u0026#34; with param 123 push rbp mov rbp, rsp sub rsp, 0x10 mov [rbp-0x04], edi mov eax, [rbp-0x04] mov edx, eax lea rsi, [0x000055EE2B1475D5] and the same disasebly in kernel space:\npush rbp mov rbp, rsp sub rsp, 0x10 mov [rbp-0x04], edi mov eax, [rbp-0x04] mov edx, eax lea rsi, [0x000055F50A1455D5] Both results are identical with gdb:\n(gdb) x/10i func1 0x555555563aba \u0026lt;func1\u0026gt;: push %rbp 0x555555563abb \u0026lt;func1+1\u0026gt;: mov %rsp,%rbp 0x555555563abe \u0026lt;func1+4\u0026gt;: sub $0x10,%rsp 0x555555563ac2 \u0026lt;func1+8\u0026gt;: mov %edi,-0x4(%rbp) 0x555555563ac5 \u0026lt;func1+11\u0026gt;: mov -0x4(%rbp),%eax 0x555555563ac8 \u0026lt;func1+14\u0026gt;: mov %eax,%edx 0x555555563aca \u0026lt;func1+16\u0026gt;: lea 0x17b04(%rip),%rsi # 0x55555557b5d5 \u0026lt;__FUNCTION__.3489\u0026gt; and func1 eauls to :\np/u (void*)func1 $14 = 93824992295610 and the addr parameter also equals to it:\ncat /sys/module/disasm/parameters/addr 93824992295610 Testing of disasbly internal kernel function Use this command to get list of inernal functions that module is able to disasebmly.\nsudo su -c \u0026#39;/sys/module/disasm/parameters/func\u0026#39; Here is a pyhton code to use when its required to disasmble the code of kfree:\n# select intenal function to disasembly  f = open(\u0026#34;/sys/module/disasm/parameters/func\u0026#34;,\u0026#34;w\u0026#34;); f.write(\u0026#34;kfree\u0026#34;); f.close(); # read the disasmbly data as file f=open(\u0026#34;/dev/disa\u0026#34;,\u0026#34;r\u0026#34;); a = f.read(256); a = a.replace(\u0026#39;;\u0026#39;,\u0026#39;\\n\u0026#39;); print ( a); f.close(); And the result is:\npush rbp mov rbp, rsp push r13 push r12 mov r13, [rbp+0x08] push rbx mov rbx, rdi nop cmp rbx, 0x10 jbe 0xFFFFFFFF8117C71D mov r10d, 0x80000000 mov rax, 0x77FF80000000 mov rdi, 0xFFFFEA0000000000 add r10, rbx cmovb rax, [0xFFFFFFFF81E0D010] add r10, rax To use the module in bash command line type:\nsudo cat /dev/disa | sed -e $\u0026#39;s/;/\\\\\\n/g\u0026#39; References Here are some reference sources that used to create this modulehttp://www.embeddedlinux.org.cn/essentiallinuxdevicedrivers/final/ch05lev1sec7.htmlhttp://olegkutkov.me/2018/03/14/simple-linux-character-device-driver/https://linux-kernel-labs.github.io/master/labs/device_drivers.htmlhttps://gist.github.com/brenns10/65d1ee6bb8419f96d2ae693eb7a66cc0https://www.kernel.org/doc/htmldocs/kernel-hacking/routines-module-use-counters.htmlhttps://stackoverflow.com/questions/18456155/what-is-the-difference-between-misc-drivers-and-char-drivers"},{"url":"/2020/02/color-transformation-from-bayer-to-rgb/","title":"Color transformation from Bayer to RGB","content":"A Bayer filter mosaic is a color filter array (CFA) for arranging RGB color filters on a square grid of photosensors. Its particular arrangement of color filters is used in most single-chip digital image sensors used in digital cameras, camcorders, and scanners to create a color image. The filter pattern is 50% green, 25% red and 25% blue - see here. Color conversion algorithm The conversion algorithm is based on simple linear interpolation of pixels to find the missing value. Since Bayer filter dived into 4 pixels (red, green, green, blue), there are four types of equations for each pixel in the square.\nThe following is RGB triple for the pixels on red channel: $$ RGB_{} = ( I_{n,m} , \\frac{I_{n-1,m} +I_{n+1,m}+I_{n,m-1} + I_{n,m+1}}{4} , \\frac{I_{n-1,m-1} +I_{n+1,m+1}+I_{n-1,m+1} + I_{n+1,m-1}}{4} ) $$  The following is RGB triple for the pixels on green1 channel:\nThe following is RGB triple for the pixels on green2 channel:\nThe following is RGB triple for the pixels on blue channel:\nwhere $$ I_{n,m} $$  is raw bayer pixel\nImplemantation Implementation using python including that modules: matplotlib, numpy,cv2. To install these modules with pip:\npip install matplotlib --user pip install numpy --user #pip install cv2 --user - not sure this will work , I did it with the gentoo package manager (in debian/ubuntu you can try apt-cache search) Some images to work with can be download from here 1 2 3 4\n read raw image at a size of 540x600 in Bayer format  import matplotlib.pyplot as plt import numpy as np import cv2 file_path = \u0026#39;path-to-bayer.raw\u0026#39; imrows = 540 imcols = 600 imsize = imrows*imcols with open(file_path, \u0026#34;rb\u0026#34;) as rawimage: bayer_img = np.fromfile(rawimage, np.dtype(\u0026#39;u1\u0026#39;), imsize).reshape((imrows, imcols))  define a conversion function  def pixel (img): img = img.astype(np.float64) pixel = lambda x,y : { 0: [ img[x][y] , (img[x][y-1] + img[x-1][y] + img[x+1][y] + img[x][y+1]) / 4 , (img[x-1][y-1] + img[x+1][y-1] + img[x-1][y+1] + img[x+1][y+1]) / 4 ] , 1: [ (img[x-1][y] + img[x+1][y]) / 2,img[x][y] , (img[x][y-1] + img[x][y+1]) / 2 ], 2: [(img[x][y-1] + img[x][y+1]) / 2 ,img[x][y], (img[x-1][y] + img[x+1][y]) / 2], 3: [(img[x-1][y-1] + img[x+1][y-1] + img[x-1][y+1] + img[x+1][y+1]) / 4 , (img[x][y-1] + img[x-1][y] + img[x+1][y] + img[x][y+1]) / 4 ,img[x][y] ] } [ x % 2 + (y % 2)*2] res = np.zeros ( [ np.size(img,0) , np.size(img,1) , 3] ) for x in range (1,np.size(img,0)-2): for y in range (1,np.size(img,1)-2): p = pixel(x,y) p.reverse(); res[x][y] = p res = res.astype(np.uint8) return res  break image to to 3 channels : RGB  def channel_break (img): img = img.astype(np.float64) red=np.copy (img);red [1::2,:]=0;red[:,1::2]=0 blue=np.copy (img);blue [0::2,:]=0;blue[:,0::2]=0 green=np.copy (img);green [0::2,0::2]=0;green [1::2,1::2]=0; red = red.astype(np.float64) blue = blue.astype(np.float64) green = green.astype(np.float64) return (red,green,blue)  conver RGB to gray  def rgb2gray(img): res = np.zeros ( [ np.size(img,0) , np.size(img,1) , 3] ) res = res.astype(np.float64) for x in range (1,np.size(img,0)-1): for y in range (1,np.size(img,1)-1): res[x][y]=img[x][y][0]*0 + img[x][y][1]*0.5 + img[x][y][2]*0.5; res = res.astype(np.uint8) return res  save results to png files  # plot bayer imager plt.imshow(bayer_img) plt.title (\u0026#39;bayer img\u0026#39;) plt.imsave(\u0026#39;bayer_img.png\u0026#39;, bayer_img) #plt.show() # this algorithm conversion rgb_res = pixel (bayer_img) plt.imshow(rgb_res) plt.title (\u0026#39;the article conversion\u0026#39;) plt.imsave(\u0026#39;the_article_conversion.png\u0026#39;, rgb_res) #plt.show() # open cv conversion colour = cv2.cvtColor(bayer_img, cv2.COLOR_BAYER_BG2BGR) plt.imshow(colour) plt.title (\u0026#39;color image by open cv\u0026#39;) plt.imsave(\u0026#39;color_image_by_opencv.png\u0026#39;, colour) #plt.show() # convert to gray level gray = rgb2gray(rgb_res) plt.imshow(gray) plt.title (\u0026#39;gray conversion\u0026#39;) plt.imsave(\u0026#39;gray_level.png\u0026#39;, gray) #plt.show() # break to RGB channels RGB = channel_break(bayer_img) blue_only = pixel (RGB[0]) plt.imshow(blue_only) plt.title (\u0026#39;blue only\u0026#39;) plt.imsave(\u0026#39;blue_only.png\u0026#39;,blue_only) plt.show() green_only = pixel (RGB[1]) plt.imshow(green_only) plt.title (\u0026#39;green only\u0026#39;) plt.imsave(\u0026#39;green_only.png\u0026#39;,green_only) plt.show() red_only = pixel (RGB[2]) plt.imshow(red_only) plt.title (\u0026#39;red only\u0026#39;) plt.imsave(\u0026#39;red_only.png\u0026#39;,red_only) plt.show() #plt.show() Results   Raw Bayer Image     Conversion to RGB     Conversion by OpenCV     Conversion to Gray     Red Only     Green Only     Blue Only   References Here are some reference sources that used to create this post\n[1] Bayer to RGB\n[2] RGB color conversions matrixes \n[3] Bayer to RGB algorithm\n[4] Bayer Patterns in Digicam CCDs\n[5] RGB to gray\n"},{"url":"/2020/02/my-first-post/","title":"My First Post","content":"It is My first Hugo post. I decided to work with Hugo after I had an experience with word press. For me, writing documents in Markdown format and using GitHub to manage my files, tags, and categories instead of using MySQL database is much easier to manage and deploy. To learn how to create such a blog in Hugo, you can try this blog,\ndiagram Learn how to plot the kinds of figures. See also hugo shortcodes.\n  gravizo  DOT Language (GraphViz) Example    mermaid setup and examples classDiagram Class01 C2 : Where am i? Class09 --* C3 Class09 --| Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08  C2: Cool label     flowcharts setup and examples    document.addEventListener('DOMContentLoaded', function() { chart = flowchart.parse(\"\\nst=\\u003estart: Start|past:\\u003ehttps://github.com/adrai/flowchart.js[blank]\\ne=\\u003eend: End:\\u003ehttp://www.google.com\\nop1=\\u003eoperation: My Operation|past:$myFunction\\nop2=\\u003eoperation: Stuff|current\\nsub1=\\u003esubroutine: My Subroutine|invalid\\ncond=\\u003econdition: Yes\\nor No?|approved:\\u003ehttp://www.google.com\\nc2=\\u003econdition: Good idea|rejected\\nio=\\u003einputoutput: catch something...|request\\npara=\\u003eparallel: parallel tasks\\n\\nst-\\u003eop1(right)-\\u003econd\\ncond(yes, right)-\\u003ec2\\ncond(no)-\\u003epara\\nc2(true)-\\u003eio-\\u003ee\\nc2(false)-\\u003ee\\n\\npara(path1, bottom)-\\u003esub1(left)-\\u003eop1\\npara(path2, right)-\\u003eop2-\\u003ee\\n\\nst@\\u003eop1({\\\"stroke\\\":\\\"Red\\\"})@\\u003econd({\\\"stroke\\\":\\\"Red\\\",\\\"stroke-width\\\":6,\\\"arrow-end\\\":\\\"classic-wide-long\\\"})@\\u003ec2({\\\"stroke\\\":\\\"Red\\\"})@\\u003eop2({\\\"stroke\\\":\\\"Red\\\"})@\\u003ee({\\\"stroke\\\":\\\"Red\\\"})\\n\\n\"); chart.drawSVG('canvas', { 'line-width': 3, 'maxWidth': 3, 'line-length': 50, 'text-margin': 1, 'font-size': 14, 'font': 'normal', 'font-family': 'Helvetica', 'font-weight': 'normal', 'font-color': 'black', 'line-color': 'black', 'element-color': 'black', 'fill': 'white', 'yes-text': 'yes', 'no-text': 'no', 'arrow-end': 'block', 'scale': 1, 'maxWidth': 1, 'symbols': { 'start': { 'font-color': 'blue', 'element-color': 'green', 'fill': 'yellow' }, 'end':{ 'class': 'end-element' } }, 'flowstate' : { 'past' : { 'fill' : '#CCCCCC', 'font-size' : 12}, 'current' : {'fill' : 'yellow', 'font-color' : 'red', 'font-weight' : 'bold'}, 'future' : { 'fill' : '#FFFF99'}, 'request' : { 'fill' : 'blue'}, 'invalid': {'fill' : '#444444'}, 'approved' : { 'fill' : '#58C4A3', 'font-size' : 12, 'yes-text' : 'APPROVED', 'no-text' : 'n/a' }, 'rejected' : { 'fill' : '#C45879', 'font-size' : 12, 'yes-text' : 'n/a', 'no-text' : 'REJECTED' } }}); },false);   div#canvas svg {width:100%;}     mathematical equations See here for more info on how to integrate latex mathematical equation syntax in HTML pages. The following:\n$$\\int_{a}^{b} x^2 dx$$ will render to: $$\\int_{a}^{b} x^2 dx$$ Also see here for more latex sysntax information.\n"},{"url":"/2014/04/hugo-template-primer/","title":"(Hu)go Template Primer","content":"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}  Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}  Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}  Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}  Variables Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;  Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }}  Functions Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}  Includes When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}  Logic Go templates provide the most basic iteration and conditional logic.\nIteration Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }}  Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }}  Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }}  Conditionals If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n false 0 any array, slice, map, or string of length zero  Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}  Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}  Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}  Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Pipes One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}  is the same as\n{{ eq 1 1 | if }} Same {{ end }}  It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}  Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }}  Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }}  Context (aka. the dot) The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n {{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }}  Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026quot;Permalinks\u0026quot; date: \u0026quot;2013-11-18\u0026quot; aliases: - \u0026quot;/doc/permalinks/\u0026quot; groups: [\u0026quot;extras\u0026quot;] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template:\n {{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }}  Using Site (config) Parameters In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026quot;text-center\u0026quot;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026quot;twitter\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;https://twitter.com/{{.}}\u0026quot; rel=\u0026quot;author\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;/images/twitter.png\u0026quot; width=\u0026quot;48\u0026quot; height=\u0026quot;48\u0026quot; title=\u0026quot;Twitter: {{.}}\u0026quot; alt=\u0026quot;Twitter\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026quot;recent\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{.RelPermalink}}\u0026quot;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "},{"url":"/2014/04/getting-started-with-hugo/","title":"Getting Started with Hugo","content":"Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\n Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop  Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop  Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms  Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun The best way to learn something is to play with it.\n"}]