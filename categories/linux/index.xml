<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on My Tech Blog</title><link>https://yairgd.github.io/categories/linux/</link><description>Recent content in linux on My Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 24 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://yairgd.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Install yocto and kernel development tools of IMX8</title><link>https://yairgd.github.io/2020/02/install-yocto-and-kernel-development-tools-of-imx8/</link><pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate><guid>https://yairgd.github.io/2020/02/install-yocto-and-kernel-development-tools-of-imx8/</guid><description>Development tools and kernel installation. The purpose of this post is to show the installation proccess of a yocto system on imx8m-var-dart , which is SOM made by varisce. The kernel is build as part of the image but, for development purposes when custom modules are devdelpoed it is more easy to build it as stand-alone and work on it outside the Yocto image. The GCC toolchain is also required for this task.</description></item><item><title>Linux char device to handle with IRQ</title><link>https://yairgd.github.io/2020/02/linux-char-device-to-handle-with-irq/</link><pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate><guid>https://yairgd.github.io/2020/02/linux-char-device-to-handle-with-irq/</guid><description>Linux chr device to handle with external IRQ We have an external FPGA that triggers GPIO. To handle the IRQ in userspace, it had to write a Linux chr device to control the IRQ in the kernel space and than signalize the userspace using a standard system call.
Here is the simple drive:
#include &amp;lt;linux/module.h&amp;gt; #include &amp;lt;linux/kernel.h&amp;gt; /* printk() */ #include &amp;lt;linux/moduleparam.h&amp;gt; #include &amp;lt;asm/uaccess.h&amp;gt; #include &amp;lt;asm/pgtable.h&amp;gt; #include &amp;lt;linux/fs.h&amp;gt; #include &amp;lt;linux/gfp.</description></item><item><title>Linux module magic info</title><link>https://yairgd.github.io/2020/02/linux-module-magic-info/</link><pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate><guid>https://yairgd.github.io/2020/02/linux-module-magic-info/</guid><description>Linux core isolation Change module magic info Sometimes we want to build a module separate from the kernel. When the kernel is built, it generates a magic number, which probably depends on compiler version, kernel version, git source revision, etc. Time is also probably part of this magic number, since the kernel may build with the same parameters but with a different timestamp, it will have a different magic number, and then we will get this message when we try to insert it:</description></item><item><title>Linux core isolation to have a close RT performance.</title><link>https://yairgd.github.io/2020/02/linux-core-isolation-to-have-a-close-rt-performance./</link><pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate><guid>https://yairgd.github.io/2020/02/linux-core-isolation-to-have-a-close-rt-performance./</guid><description>Linux core isolation I have a real-time task that needed to run periodically at a constant rate at a constant time each time. Just running this task on a multithreaded environment can cause it to run in different timing values. A possible solution to this problem is to use Linux core isolation. In this case, we assign a specific core for the task, and the Linux kernel is getting out from the SMP balancing and hat core cand use for a specific task with minimal interrupts.</description></item><item><title>Linux module to disassemble code in the Linux kernel.</title><link>https://yairgd.github.io/2020/02/linux-module-to-disassemble-code-in-the-linux-kernel./</link><pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate><guid>https://yairgd.github.io/2020/02/linux-module-to-disassemble-code-in-the-linux-kernel./</guid><description>disa A simple module to disassembly memory using a Linux kernel module. This module is based on Zydis and integrated into this module. Also, there is a userspace application to demonstrate the Zydis library on a test function in user space and disassembly of the same c function at the kernel space. Also can dissemble internal c functions of the kernel like printk, kmalloc etc&amp;rsquo;.
Module structure The module allows two interfaces from userspace: * Using kernel parameters API: This part of the module demonstrates the use of module parameters API to control the module.</description></item></channel></rss>